#+TITLE: Constant Folding Verification
#+AUTHOR: Yi-Chi Lee

** Define the Language
First, model the language that we would like to support. In this project, I use a expression language that supports the following operations:
#+begin_src text
  <expr> ::= <constant>
         ::= <variable>
         ::= <expr1> + <expr2>
         ::= <expr1> * <expr2>
         :: let <variable> = <expr1> in <expr2>
#+end_src

Represent the abovementioned operations in ACL2:
#+begin_src text
  <constant>                          -> (const n)
  <variable>                          -> (var x)
  <expr1> + <expr2>                   -> (add e1 e2)
  <expr1> * <expr2>                   -> (mul e1 e2)
  let <variable> = <expr1> in <expr2> -> (let x e1 e2)
#+end_src

The "expression" can be recognized by:
#+begin_src lisp
  (defun exprp (x)
    (if (consp x)
        (cond ((eq (car x) 'const)
               (integerp (cadr x)))
              ((eq (car x) 'var)
               (symbolp (cadr x)))
              ((eq (car x) 'add)
               (and (exprp (cadr x))
                    (exprp (caddr x))))
              ((eq (car x) 'mul)
               (and (exprp (cadr x))
                    (exprp (caddr x))))
              ((eq (car x) 'let)
               (and (symbolp (cadr x))
                    (exprp (caddr x))
                    (exprp (cadddr x))))
              (t nil))
        nil))
#+end_src

Simple check for exprp:
#+begin_src lisp
  ACL2 !>(exprp '(add (mul (const 1) (const 2)) (mul (const 3) (const 4))))
  T
  ACL2 !>(exprp '(add (var abc) (const 2)))
  T
  ACL2 !>(exprp '(add abc (const 2))) ; The abc isn't wrapped by var
  NIL
  ACL2 !>(exprp '(let a (const 2) (add (const 1) a)))
  NIL
  ACL2 !>(exprp '(let a (const 2) (add (const 1) (var a))))
  T
#+end_src

** Define the evaluation function
The evaluation function is used to execute expressions and produce results. In this project, we will verify whether evaluating
an expression before and after applying constant folding yields the same result.

#+begin_src lisp
  (defun eval-expr (e env)
    (cond ((eq (car e) 'const) (cadr e))
          ((eq (car e) 'var)
           (cdr (assoc (cadr e) env)))
          ((eq (car e) 'add)
           (+ (eval-expr (cadr e) env)
              (eval-expr (caddr e) env)))
          ((eq (car e) 'mul)
           (* (eval-expr (cadr e) env)
              (eval-expr (caddr e) env)))
          ((eq (car e) 'let)
           (eval-expr (cadddr e)
                      ; add (cons var val) to env
                      (cons (cons (cadr e) (eval-expr (caddr e) env))
                            env)))
          (t nil)))

  (defun evl (e)
    (eval-expr e nil))
#+end_src

Simple test for evl:
#+begin_src lisp
ACL2 !>(evl '(add (const 1) (const 2)))
3
ACL2 !>(evl '(let a (const 4) (add (const 1) (var a))))
5
#+end_src

** Define the optimizer (Constant Folding)
Now, we have to define the constant folding optimizer, which would optimize and transform the original source code. (That's why we have to verify the correctness of it.)
#+begin_src lisp
  (defun const-fold (e)
    (if (or (eq (car e) 'const) (eq (car e) 'var))
        e
        (if (eq (car e) 'add)
            (let ((l (const-fold (cadr e)))
                  (r (const-fold (caddr e))))
              (if (and (eq (car l) 'const) (eq (car r) 'const))
                  (list 'const (+ (cadr l) (cadr r)))
                  e))
            (if (eq (car e) 'mul)
                (let ((l (const-fold (cadr e)))
                      (r (const-fold (caddr e))))
                  (if (and (eq (car l) 'const) (eq (car r) 'const))
                      (list 'const (* (cadr l) (cadr r)))
                      e))
                (if (eq (car e) 'let)
                    (list 'let (cadr e)
                          (const-fold (caddr e))
                          (const-fold (cadddr e)))
                    e)))))
#+end_src

Simple test for const-fold:
#+begin_src lisp
  >(const-fold '(add (const 1) (mul (const 1) (const 3))))
  (const 4)
  >(const-fold '(add (const 1) (mul (var a) (const 3))))
  (add (const 1) (mul (var a) (const 3)))
  >(const-fold '(let a (add (const 1) (const 2)) (var a)))
  (let a (const 3) (var a))
#+end_src

** Verifying the correctness of constant folding optimizer
To verify the correctness of constant folding, we have to compare the evaluated result before and after the constant folding. If the results are equal, the constant folding
is correct; otherwise, is change the operational semantics of the original language.

*** Lemma 1:
#+begin_src lisp
                                          ; Lemma 1
  (defthm const-fold-preserves-eval
        (implies (and (exprp e) (alistp env))
                 (equal (eval-expr (const-fold e) env)
                        (eval-expr e env))))

  ;; Q.E.D.

  ;; Summary
  ;; Form:  ( DEFTHM CONST-FOLD-PRESERVES-EVAL ...)
  ;; Rules: ((:DEFINITION ALISTP)
  ;;         (:DEFINITION CONST-FOLD)
  ;;         (:DEFINITION EQ)
  ;;         (:DEFINITION EVAL-EXPR)
  ;;         (:DEFINITION EXPRP)
  ;;         (:DEFINITION NOT)
  ;;         (:EXECUTABLE-COUNTERPART EQUAL)
  ;;         (:FAKE-RUNE-FOR-TYPE-SET NIL)
  ;;         (:FORWARD-CHAINING ALISTP-FORWARD-TO-TRUE-LISTP)
  ;;         (:INDUCTION CONST-FOLD)
  ;;         (:INDUCTION EVAL-EXPR)
  ;;         (:INDUCTION EXPRP)
  ;;         (:REWRITE CAR-CONS)
  ;;         (:REWRITE CDR-CONS)
  ;;         (:TYPE-PRESCRIPTION ALISTP))
  ;; Splitter rules (see :DOC splitter):
  ;;   if-intro: ((:DEFINITION CONST-FOLD)
  ;;              (:DEFINITION EXPRP))
  ;; Time:  0.03 seconds (prove: 0.03, print: 0.00, other: 0.00)
  ;; Prover steps counted:  14711
  ;;  CONST-FOLD-PRESERVES-EVAL
#+end_src

*** Main Theorem
#+begin_src lisp
                                          ; Main Theorem
  (defthm const-fold-correct
      (implies (exprp e)
               (equal (evl (const-fold e))
                      (evl e))))

  ;; Q.E.D.

  ;; Summary
  ;; Form:  ( DEFTHM CONST-FOLD-CORRECT ...)
  ;; Rules: ((:DEFINITION EVL)
  ;;         (:EXECUTABLE-COUNTERPART ALISTP)
  ;;         (:FAKE-RUNE-FOR-TYPE-SET NIL)
  ;;         (:REWRITE CONST-FOLD-PRESERVES-EVAL)
  ;;         (:TYPE-PRESCRIPTION EXPRP))
  ;; Warnings:  Subsume and Non-rec
  ;; Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
  ;; Prover steps counted:  639
  ;; CONST-FOLD-CORRECT
#+end_src
